#include <stdio.h>

void insertionSort(int A[], int n)
{
    int i, j, key;
    
    // Loop from the second element to the last element
    for (j = 1; j < n; j++) {
        key = A[j];       // The element to be inserted in the sorted part
        i = j - 1;

        // Move elements of A[0..j-1], that are greater than key,
        // to one position ahead of their current position
        while (i >= 0 && A[i] > key) {
            A[i + 1] = A[i];  // Shift larger element to the right
            i = i - 1;
        }

        A[i + 1] = key;  // Insert the key into the correct position
    }
}
/*_________________________________________________________________________________________________________*/
/*
Explanation:

ðŸ”¹ Parameters:
int A[]: Array to be sorted.
int n: Number of elements in the array.

ðŸ”¹ Loop Details:
Outer loop (for loop): Starts from j = 1 (since the first element is considered sorted).
key = A[j]: The current element to be inserted into the sorted section.
i = j - 1: Start comparing with elements before the current element.

ðŸ”¹ Inner Loop (while):
Compares key with previous elements (A[i]).
If A[i] > key, shift A[i] one position to the right (A[i+1] = A[i]).
Continue this until you find the correct position for key.

ðŸ”¹ Insertion:
After shifting, A[i + 1] = key places the current element in its sorted position.

ðŸ§  Time Complexity:
Worst-case: O(nÂ²) â€” when the array is sorted in reverse.
Best-case: O(n) â€” when the array is already sorted.

ðŸ§ª Example:
Input:
int A[] = {5, 2, 4, 6, 1, 3}

After sorting:
A[] = {1, 2, 3, 4, 5, 6}
*/
