#include <stdio.h>
#include <limits.h> // for INT_MAX

// Merge function to merge two sorted subarrays
void Merge(int A[], int p, int q, int r) {
    int n1 = q - p + 1;  // Size of left subarray
    int n2 = r - q;      // Size of right subarray

    // Temporary arrays
    int L[n1 + 1], R[n2 + 1];

    // Copy data into temporary arrays L[] and R[]
    for (int i = 0; i < n1; i++) {
        L[i] = A[p + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = A[q + 1 + j];
    }

    // Add sentinel values (infinity)
    L[n1] = INT_MAX;
    R[n2] = INT_MAX;

    // Merge L[] and R[] back into A[p..r]
    int i = 0, j = 0;
    for (int k = p; k <= r; k++) {
        if (L[i] <= R[j]) {
            A[k] = L[i];
            i++;
        } else {
            A[k] = R[j];
            j++;
        }
    }
}

// MergeSort function
void MergeSort(int A[], int p, int r) {
    if (p < r) {
        int q = (p + r) / 2;  // Find the midpoint

        // Sort the first and second halves
        MergeSort(A, p, q);       // Left half
        MergeSort(A, q + 1, r);   // Right half

        // Merge the sorted halves
        Merge(A, p, q, r);
    }
}

// Utility function to print the array
void PrintArray(int A[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", A[i]);
    }
    printf("\n");
}

// Main function to test Merge Sort
int main() {
    int A[] = {38, 27, 43, 3, 9, 82, 10};
    int size = sizeof(A) / sizeof(A[0]);

    printf("Original array:\n");
    PrintArray(A, size);

    MergeSort(A, 0, size - 1);

    printf("Sorted array:\n");
    PrintArray(A, size);

    return 0;
}
