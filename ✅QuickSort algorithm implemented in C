#include <stdio.h>

// Partition function: places the pivot element at its correct position
// and places smaller elements to the left and larger to the right
int partition(int a[], int p, int r) {
    int x = a[r];      // Choose pivot as the last element
    int i = p - 1;      // Index of the smaller element

    for (int j = p; j < r; j++) {
        if (a[j] <= x) {
            i++;
            // Swap a[i] and a[j]
            int temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
    }

    // Place the pivot in the correct position
    int temp = a[i + 1];
    a[i + 1] = a[r];
    a[r] = temp;

    return i + 1; // Return the partition index
}

// QuickSort function: recursively sorts the array
void quicksort(int a[], int p, int r) {
    if (p < r) {
        int q = partition(a, p, r);    // Partition the array
        quicksort(a, p, q - 1);        // Sort the left part
        quicksort(a, q + 1, r);        // Sort the right part
    }
}

int main() {
    // Input array
    int a[] = {1, 5, 3, 2, 12, 34, 76, 98, 78, 4, 10, 0, 9, 6, 7, 8, 11, 13, 14, 15};
    int n = sizeof(a) / sizeof(a[0]);  // Number of elements in array

    // Call QuickSort on the entire array
    quicksort(a, 0, n - 1);

    // Print the sorted array
    printf("Sorted array:\n");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }

    return 0;
}
